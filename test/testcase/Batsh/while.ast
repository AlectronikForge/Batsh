Program
  [ Statement
      (Expression
         (Assign
            ( Identifier
                "i"
                LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 1 }
            , Literal
                (Int
                   0
                   LP { lpLine = 1 , lpColumn = 5 , lpStartByte = 4 , lpLength = 1 })
                LP { lpLine = 1 , lpColumn = 5 , lpStartByte = 4 , lpLength = 1 }
            )
            LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 5 })
         LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 6 })
      LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 6 }
  , Statement
      (While
         ( Binary
             ( Less
                 LP { lpLine = 2 , lpColumn = 10 , lpStartByte = 16 , lpLength = 1 }
             , LeftValue
                 (Identifier
                    "i"
                    LP { lpLine = 2 , lpColumn = 8 , lpStartByte = 14 , lpLength = 1 })
                 LP { lpLine = 2 , lpColumn = 8 , lpStartByte = 14 , lpLength = 1 }
             , Literal
                 (Int
                    5
                    LP
                      { lpLine = 2 , lpColumn = 12 , lpStartByte = 18 , lpLength = 1 })
                 LP { lpLine = 2 , lpColumn = 12 , lpStartByte = 18 , lpLength = 1 }
             )
             LP { lpLine = 2 , lpColumn = 8 , lpStartByte = 14 , lpLength = 5 }
         , Block
             [ Expression
                 (Call
                    ( "print"
                    , [ Binary
                          ( Concat
                              LP { lpLine = 3 , lpColumn = 11 , lpStartByte = 33 , lpLength = 2 }
                          , LeftValue
                              (Identifier
                                 "i"
                                 LP { lpLine = 3 , lpColumn = 9 , lpStartByte = 31 , lpLength = 1 })
                              LP { lpLine = 3 , lpColumn = 9 , lpStartByte = 31 , lpLength = 1 }
                          , Literal
                              (String
                                 " "
                                 LP
                                   { lpLine = 3 , lpColumn = 14 , lpStartByte = 36 , lpLength = 3 })
                              LP { lpLine = 3 , lpColumn = 14 , lpStartByte = 36 , lpLength = 3 }
                          )
                          LP { lpLine = 3 , lpColumn = 9 , lpStartByte = 31 , lpLength = 8 }
                      ]
                    )
                    LP
                      { lpLine = 3 , lpColumn = 3 , lpStartByte = 25 , lpLength = 15 })
                 LP { lpLine = 3 , lpColumn = 3 , lpStartByte = 25 , lpLength = 16 }
             , Expression
                 (Assign
                    ( Identifier
                        "i"
                        LP { lpLine = 4 , lpColumn = 3 , lpStartByte = 44 , lpLength = 1 }
                    , Binary
                        ( Plus
                            LP { lpLine = 4 , lpColumn = 9 , lpStartByte = 50 , lpLength = 1 }
                        , LeftValue
                            (Identifier
                               "i"
                               LP { lpLine = 4 , lpColumn = 7 , lpStartByte = 48 , lpLength = 1 })
                            LP { lpLine = 4 , lpColumn = 7 , lpStartByte = 48 , lpLength = 1 }
                        , Literal
                            (Int
                               1
                               LP
                                 { lpLine = 4 , lpColumn = 11 , lpStartByte = 52 , lpLength = 1 })
                            LP { lpLine = 4 , lpColumn = 11 , lpStartByte = 52 , lpLength = 1 }
                        )
                        LP { lpLine = 4 , lpColumn = 7 , lpStartByte = 48 , lpLength = 5 }
                    )
                    LP { lpLine = 4 , lpColumn = 3 , lpStartByte = 44 , lpLength = 9 })
                 LP { lpLine = 4 , lpColumn = 3 , lpStartByte = 44 , lpLength = 10 }
             ]
             LP
               { lpLine = 2 , lpColumn = 15 , lpStartByte = 21 , lpLength = 35 }
         )
         LP { lpLine = 2 , lpColumn = 1 , lpStartByte = 7 , lpLength = 49 })
      LP { lpLine = 2 , lpColumn = 1 , lpStartByte = 7 , lpLength = 49 }
  , Statement
      (Expression
         (Call
            ( "println" , [] )
            LP { lpLine = 6 , lpColumn = 1 , lpStartByte = 57 , lpLength = 9 })
         LP
           { lpLine = 6 , lpColumn = 1 , lpStartByte = 57 , lpLength = 10 })
      LP { lpLine = 6 , lpColumn = 1 , lpStartByte = 57 , lpLength = 10 }
  , Statement
      (Comment
         " Fibonacci"
         LP
           { lpLine = 7 , lpColumn = 1 , lpStartByte = 68 , lpLength = 12 })
      LP { lpLine = 7 , lpColumn = 1 , lpStartByte = 68 , lpLength = 12 }
  , Statement
      (Expression
         (Assign
            ( Identifier
                "n"
                LP { lpLine = 8 , lpColumn = 1 , lpStartByte = 81 , lpLength = 1 }
            , Literal
                (Int
                   0
                   LP { lpLine = 8 , lpColumn = 5 , lpStartByte = 85 , lpLength = 1 })
                LP { lpLine = 8 , lpColumn = 5 , lpStartByte = 85 , lpLength = 1 }
            )
            LP { lpLine = 8 , lpColumn = 1 , lpStartByte = 81 , lpLength = 5 })
         LP { lpLine = 8 , lpColumn = 1 , lpStartByte = 81 , lpLength = 6 })
      LP { lpLine = 8 , lpColumn = 1 , lpStartByte = 81 , lpLength = 6 }
  , Statement
      (Expression
         (Assign
            ( Identifier
                "i"
                LP { lpLine = 9 , lpColumn = 1 , lpStartByte = 88 , lpLength = 1 }
            , Literal
                (Int
                   0
                   LP { lpLine = 9 , lpColumn = 5 , lpStartByte = 92 , lpLength = 1 })
                LP { lpLine = 9 , lpColumn = 5 , lpStartByte = 92 , lpLength = 1 }
            )
            LP { lpLine = 9 , lpColumn = 1 , lpStartByte = 88 , lpLength = 5 })
         LP { lpLine = 9 , lpColumn = 1 , lpStartByte = 88 , lpLength = 6 })
      LP { lpLine = 9 , lpColumn = 1 , lpStartByte = 88 , lpLength = 6 }
  , Statement
      (Expression
         (Assign
            ( Identifier
                "j"
                LP { lpLine = 10 , lpColumn = 1 , lpStartByte = 95 , lpLength = 1 }
            , Literal
                (Int
                   1
                   LP
                     { lpLine = 10 , lpColumn = 5 , lpStartByte = 99 , lpLength = 1 })
                LP { lpLine = 10 , lpColumn = 5 , lpStartByte = 99 , lpLength = 1 }
            )
            LP
              { lpLine = 10 , lpColumn = 1 , lpStartByte = 95 , lpLength = 5 })
         LP
           { lpLine = 10 , lpColumn = 1 , lpStartByte = 95 , lpLength = 6 })
      LP { lpLine = 10 , lpColumn = 1 , lpStartByte = 95 , lpLength = 6 }
  , Statement
      (While
         ( Binary
             ( Less
                 LP
                   { lpLine = 11 , lpColumn = 10 , lpStartByte = 111 , lpLength = 1 }
             , LeftValue
                 (Identifier
                    "n"
                    LP
                      { lpLine = 11 , lpColumn = 8 , lpStartByte = 109 , lpLength = 1 })
                 LP
                   { lpLine = 11 , lpColumn = 8 , lpStartByte = 109 , lpLength = 1 }
             , Literal
                 (Int
                    40
                    LP
                      { lpLine = 11 , lpColumn = 12 , lpStartByte = 113 , lpLength = 2 })
                 LP
                   { lpLine = 11 , lpColumn = 12 , lpStartByte = 113 , lpLength = 2 }
             )
             LP
               { lpLine = 11 , lpColumn = 8 , lpStartByte = 109 , lpLength = 6 }
         , Block
             [ Expression
                 (Assign
                    ( Identifier
                        "k"
                        LP
                          { lpLine = 12 , lpColumn = 3 , lpStartByte = 121 , lpLength = 1 }
                    , Binary
                        ( Plus
                            LP
                              { lpLine = 12 , lpColumn = 9 , lpStartByte = 127 , lpLength = 1 }
                        , LeftValue
                            (Identifier
                               "i"
                               LP
                                 { lpLine = 12 , lpColumn = 7 , lpStartByte = 125 , lpLength = 1 })
                            LP
                              { lpLine = 12 , lpColumn = 7 , lpStartByte = 125 , lpLength = 1 }
                        , LeftValue
                            (Identifier
                               "j"
                               LP
                                 { lpLine = 12 , lpColumn = 11 , lpStartByte = 129 , lpLength = 1 })
                            LP
                              { lpLine = 12 , lpColumn = 11 , lpStartByte = 129 , lpLength = 1 }
                        )
                        LP
                          { lpLine = 12 , lpColumn = 7 , lpStartByte = 125 , lpLength = 5 }
                    )
                    LP
                      { lpLine = 12 , lpColumn = 3 , lpStartByte = 121 , lpLength = 9 })
                 LP
                   { lpLine = 12 , lpColumn = 3 , lpStartByte = 121 , lpLength = 10 }
             , Expression
                 (Assign
                    ( Identifier
                        "i"
                        LP
                          { lpLine = 13 , lpColumn = 3 , lpStartByte = 134 , lpLength = 1 }
                    , LeftValue
                        (Identifier
                           "j"
                           LP
                             { lpLine = 13 , lpColumn = 7 , lpStartByte = 138 , lpLength = 1 })
                        LP
                          { lpLine = 13 , lpColumn = 7 , lpStartByte = 138 , lpLength = 1 }
                    )
                    LP
                      { lpLine = 13 , lpColumn = 3 , lpStartByte = 134 , lpLength = 5 })
                 LP
                   { lpLine = 13 , lpColumn = 3 , lpStartByte = 134 , lpLength = 6 }
             , Expression
                 (Assign
                    ( Identifier
                        "j"
                        LP
                          { lpLine = 14 , lpColumn = 3 , lpStartByte = 143 , lpLength = 1 }
                    , LeftValue
                        (Identifier
                           "k"
                           LP
                             { lpLine = 14 , lpColumn = 7 , lpStartByte = 147 , lpLength = 1 })
                        LP
                          { lpLine = 14 , lpColumn = 7 , lpStartByte = 147 , lpLength = 1 }
                    )
                    LP
                      { lpLine = 14 , lpColumn = 3 , lpStartByte = 143 , lpLength = 5 })
                 LP
                   { lpLine = 14 , lpColumn = 3 , lpStartByte = 143 , lpLength = 6 }
             , Expression
                 (Assign
                    ( Identifier
                        "n"
                        LP
                          { lpLine = 15 , lpColumn = 3 , lpStartByte = 152 , lpLength = 1 }
                    , Binary
                        ( Plus
                            LP
                              { lpLine = 15 , lpColumn = 9 , lpStartByte = 158 , lpLength = 1 }
                        , LeftValue
                            (Identifier
                               "n"
                               LP
                                 { lpLine = 15 , lpColumn = 7 , lpStartByte = 156 , lpLength = 1 })
                            LP
                              { lpLine = 15 , lpColumn = 7 , lpStartByte = 156 , lpLength = 1 }
                        , Literal
                            (Int
                               1
                               LP
                                 { lpLine = 15 , lpColumn = 11 , lpStartByte = 160 , lpLength = 1 })
                            LP
                              { lpLine = 15 , lpColumn = 11 , lpStartByte = 160 , lpLength = 1 }
                        )
                        LP
                          { lpLine = 15 , lpColumn = 7 , lpStartByte = 156 , lpLength = 5 }
                    )
                    LP
                      { lpLine = 15 , lpColumn = 3 , lpStartByte = 152 , lpLength = 9 })
                 LP
                   { lpLine = 15 , lpColumn = 3 , lpStartByte = 152 , lpLength = 10 }
             , Expression
                 (Call
                    ( "println"
                    , [ LeftValue
                          (Identifier
                             "k"
                             LP
                               { lpLine = 16 , lpColumn = 11 , lpStartByte = 173 , lpLength = 1 })
                          LP
                            { lpLine = 16 , lpColumn = 11 , lpStartByte = 173 , lpLength = 1 }
                      ]
                    )
                    LP
                      { lpLine = 16 , lpColumn = 3 , lpStartByte = 165 , lpLength = 10 })
                 LP
                   { lpLine = 16 , lpColumn = 3 , lpStartByte = 165 , lpLength = 11 }
             ]
             LP
               { lpLine = 11 , lpColumn = 16 , lpStartByte = 117 , lpLength = 61 }
         )
         LP
           { lpLine = 11 , lpColumn = 1 , lpStartByte = 102 , lpLength = 76 })
      LP
        { lpLine = 11 , lpColumn = 1 , lpStartByte = 102 , lpLength = 76 }
  ]
  LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 178 }
