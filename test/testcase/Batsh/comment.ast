Program
  [ Statement
      (Expression
         (Assign
            ( Identifier
                "a"
                LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 1 }
            , Literal
                (Int
                   3
                   LP { lpLine = 1 , lpColumn = 5 , lpStartByte = 4 , lpLength = 1 })
                LP { lpLine = 1 , lpColumn = 5 , lpStartByte = 4 , lpLength = 1 }
            )
            LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 5 })
         LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 6 })
      LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 6 }
  , Statement
      (Comment
         " This is comment 1"
         LP { lpLine = 2 , lpColumn = 1 , lpStartByte = 7 , lpLength = 20 })
      LP { lpLine = 2 , lpColumn = 1 , lpStartByte = 7 , lpLength = 20 }
  , Statement
      (Expression
         (Assign
            ( Identifier
                "a"
                LP { lpLine = 3 , lpColumn = 1 , lpStartByte = 28 , lpLength = 1 }
            , Binary
                ( Multiply
                    LP { lpLine = 3 , lpColumn = 7 , lpStartByte = 34 , lpLength = 1 }
                , LeftValue
                    (Identifier
                       "a"
                       LP { lpLine = 3 , lpColumn = 5 , lpStartByte = 32 , lpLength = 1 })
                    LP { lpLine = 3 , lpColumn = 5 , lpStartByte = 32 , lpLength = 1 }
                , Literal
                    (Int
                       5
                       LP { lpLine = 3 , lpColumn = 9 , lpStartByte = 36 , lpLength = 1 })
                    LP { lpLine = 3 , lpColumn = 9 , lpStartByte = 36 , lpLength = 1 }
                )
                LP { lpLine = 3 , lpColumn = 5 , lpStartByte = 32 , lpLength = 5 }
            )
            LP { lpLine = 3 , lpColumn = 1 , lpStartByte = 28 , lpLength = 9 })
         LP
           { lpLine = 3 , lpColumn = 1 , lpStartByte = 28 , lpLength = 10 })
      LP { lpLine = 3 , lpColumn = 1 , lpStartByte = 28 , lpLength = 10 }
  , Statement
      (Comment
         " This is comment 2"
         LP
           { lpLine = 4 , lpColumn = 1 , lpStartByte = 39 , lpLength = 20 })
      LP { lpLine = 4 , lpColumn = 1 , lpStartByte = 39 , lpLength = 20 }
  , Statement
      (Expression
         (Call
            ( "println"
            , [ LeftValue
                  (Identifier
                     "a"
                     LP { lpLine = 5 , lpColumn = 9 , lpStartByte = 68 , lpLength = 1 })
                  LP { lpLine = 5 , lpColumn = 9 , lpStartByte = 68 , lpLength = 1 }
              ]
            )
            LP
              { lpLine = 5 , lpColumn = 1 , lpStartByte = 60 , lpLength = 10 })
         LP
           { lpLine = 5 , lpColumn = 1 , lpStartByte = 60 , lpLength = 11 })
      LP { lpLine = 5 , lpColumn = 1 , lpStartByte = 60 , lpLength = 11 }
  , Statement
      (Comment
         "This is comment 3"
         LP
           { lpLine = 6 , lpColumn = 1 , lpStartByte = 72 , lpLength = 19 })
      LP { lpLine = 6 , lpColumn = 1 , lpStartByte = 72 , lpLength = 19 }
  ]
  LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 91 }
