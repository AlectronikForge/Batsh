Program
  [ Statement
      (Expression
         (Call
            ( "call"
            , [ Literal
                  (String
                     "println"
                     LP { lpLine = 1 , lpColumn = 6 , lpStartByte = 5 , lpLength = 9 })
                  LP { lpLine = 1 , lpColumn = 6 , lpStartByte = 5 , lpLength = 9 }
              , Literal
                  (String
                     "Println Called"
                     LP
                       { lpLine = 1 , lpColumn = 17 , lpStartByte = 16 , lpLength = 16 })
                  LP
                    { lpLine = 1 , lpColumn = 17 , lpStartByte = 16 , lpLength = 16 }
              ]
            )
            LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 33 })
         LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 34 })
      LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 34 }
  , Statement
      (Expression
         (Assign
            ( Identifier
                "cmd"
                LP { lpLine = 2 , lpColumn = 1 , lpStartByte = 35 , lpLength = 3 }
            , Binary
                ( Concat
                    LP { lpLine = 2 , lpColumn = 12 , lpStartByte = 46 , lpLength = 2 }
                , Literal
                    (String
                       "ec"
                       LP { lpLine = 2 , lpColumn = 7 , lpStartByte = 41 , lpLength = 4 })
                    LP { lpLine = 2 , lpColumn = 7 , lpStartByte = 41 , lpLength = 4 }
                , Literal
                    (String
                       "ho"
                       LP
                         { lpLine = 2 , lpColumn = 15 , lpStartByte = 49 , lpLength = 4 })
                    LP { lpLine = 2 , lpColumn = 15 , lpStartByte = 49 , lpLength = 4 }
                )
                LP { lpLine = 2 , lpColumn = 7 , lpStartByte = 41 , lpLength = 12 }
            )
            LP
              { lpLine = 2 , lpColumn = 1 , lpStartByte = 35 , lpLength = 18 })
         LP
           { lpLine = 2 , lpColumn = 1 , lpStartByte = 35 , lpLength = 19 })
      LP { lpLine = 2 , lpColumn = 1 , lpStartByte = 35 , lpLength = 19 }
  , Statement
      (Expression
         (Call
            ( "call"
            , [ LeftValue
                  (Identifier
                     "cmd"
                     LP { lpLine = 3 , lpColumn = 6 , lpStartByte = 60 , lpLength = 3 })
                  LP { lpLine = 3 , lpColumn = 6 , lpStartByte = 60 , lpLength = 3 }
              , Literal
                  (String
                     "Echo Called"
                     LP
                       { lpLine = 3 , lpColumn = 11 , lpStartByte = 65 , lpLength = 13 })
                  LP
                    { lpLine = 3 , lpColumn = 11 , lpStartByte = 65 , lpLength = 13 }
              ]
            )
            LP
              { lpLine = 3 , lpColumn = 1 , lpStartByte = 55 , lpLength = 24 })
         LP
           { lpLine = 3 , lpColumn = 1 , lpStartByte = 55 , lpLength = 25 })
      LP { lpLine = 3 , lpColumn = 1 , lpStartByte = 55 , lpLength = 25 }
  , Statement
      (Expression
         (Assign
            ( Identifier
                "retval"
                LP { lpLine = 4 , lpColumn = 1 , lpStartByte = 81 , lpLength = 6 }
            , Call
                ( "echo"
                , [ Literal
                      (String
                         "Value 100%"
                         LP
                           { lpLine = 4 , lpColumn = 15 , lpStartByte = 95 , lpLength = 12 })
                      LP
                        { lpLine = 4 , lpColumn = 15 , lpStartByte = 95 , lpLength = 12 }
                  ]
                )
                LP
                  { lpLine = 4 , lpColumn = 10 , lpStartByte = 90 , lpLength = 18 }
            )
            LP
              { lpLine = 4 , lpColumn = 1 , lpStartByte = 81 , lpLength = 27 })
         LP
           { lpLine = 4 , lpColumn = 1 , lpStartByte = 81 , lpLength = 28 })
      LP { lpLine = 4 , lpColumn = 1 , lpStartByte = 81 , lpLength = 28 }
  , Statement
      (Expression
         (Call
            ( "println"
            , [ LeftValue
                  (Identifier
                     "retval"
                     LP
                       { lpLine = 5 , lpColumn = 9 , lpStartByte = 118 , lpLength = 6 })
                  LP { lpLine = 5 , lpColumn = 9 , lpStartByte = 118 , lpLength = 6 }
              ]
            )
            LP
              { lpLine = 5 , lpColumn = 1 , lpStartByte = 110 , lpLength = 15 })
         LP
           { lpLine = 5 , lpColumn = 1 , lpStartByte = 110 , lpLength = 16 })
      LP
        { lpLine = 5 , lpColumn = 1 , lpStartByte = 110 , lpLength = 16 }
  ]
  LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 126 }
