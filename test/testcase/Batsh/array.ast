Program
  [ Statement
      (Expression
         (Assign
            ( Identifier
                "a"
                LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 1 }
            , Literal
                (List
                   [ Literal
                       (String
                          ""
                          LP { lpLine = 1 , lpColumn = 6 , lpStartByte = 5 , lpLength = 2 })
                       LP { lpLine = 1 , lpColumn = 6 , lpStartByte = 5 , lpLength = 2 }
                   , Literal
                       (String
                          "y"
                          LP { lpLine = 1 , lpColumn = 10 , lpStartByte = 9 , lpLength = 3 })
                       LP { lpLine = 1 , lpColumn = 10 , lpStartByte = 9 , lpLength = 3 }
                   , Unary
                       ( Negate
                           LP { lpLine = 1 , lpColumn = 15 , lpStartByte = 14 , lpLength = 1 }
                       , Literal
                           (Int
                              1
                              LP
                                { lpLine = 1 , lpColumn = 16 , lpStartByte = 15 , lpLength = 1 })
                           LP { lpLine = 1 , lpColumn = 16 , lpStartByte = 15 , lpLength = 1 }
                       )
                       LP { lpLine = 1 , lpColumn = 15 , lpStartByte = 14 , lpLength = 2 }
                   , Literal
                       (Int
                          1
                          LP
                            { lpLine = 1 , lpColumn = 19 , lpStartByte = 18 , lpLength = 1 })
                       LP { lpLine = 1 , lpColumn = 19 , lpStartByte = 18 , lpLength = 1 }
                   ]
                   LP { lpLine = 1 , lpColumn = 5 , lpStartByte = 4 , lpLength = 1 })
                LP { lpLine = 1 , lpColumn = 5 , lpStartByte = 4 , lpLength = 1 }
            )
            LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 5 })
         LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 21 })
      LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 21 }
  , Statement
      (Expression
         (Assign
            ( ListAccess
                ( Identifier
                    "a"
                    LP { lpLine = 2 , lpColumn = 1 , lpStartByte = 22 , lpLength = 1 }
                , Literal
                    (Int
                       0
                       LP { lpLine = 2 , lpColumn = 3 , lpStartByte = 24 , lpLength = 1 })
                    LP { lpLine = 2 , lpColumn = 3 , lpStartByte = 24 , lpLength = 1 }
                )
                LP { lpLine = 2 , lpColumn = 1 , lpStartByte = 22 , lpLength = 4 }
            , Binary
                ( Multiply
                    LP { lpLine = 2 , lpColumn = 10 , lpStartByte = 31 , lpLength = 1 }
                , Literal
                    (Int
                       2
                       LP { lpLine = 2 , lpColumn = 8 , lpStartByte = 29 , lpLength = 1 })
                    LP { lpLine = 2 , lpColumn = 8 , lpStartByte = 29 , lpLength = 1 }
                , Literal
                    (Int
                       9
                       LP
                         { lpLine = 2 , lpColumn = 12 , lpStartByte = 33 , lpLength = 1 })
                    LP { lpLine = 2 , lpColumn = 12 , lpStartByte = 33 , lpLength = 1 }
                )
                LP { lpLine = 2 , lpColumn = 8 , lpStartByte = 29 , lpLength = 5 }
            )
            LP
              { lpLine = 2 , lpColumn = 1 , lpStartByte = 22 , lpLength = 12 })
         LP
           { lpLine = 2 , lpColumn = 1 , lpStartByte = 22 , lpLength = 13 })
      LP { lpLine = 2 , lpColumn = 1 , lpStartByte = 22 , lpLength = 13 }
  , Statement
      (Expression
         (Assign
            ( ListAccess
                ( Identifier
                    "a"
                    LP { lpLine = 3 , lpColumn = 1 , lpStartByte = 36 , lpLength = 1 }
                , Literal
                    (Int
                       2
                       LP { lpLine = 3 , lpColumn = 3 , lpStartByte = 38 , lpLength = 1 })
                    LP { lpLine = 3 , lpColumn = 3 , lpStartByte = 38 , lpLength = 1 }
                )
                LP { lpLine = 3 , lpColumn = 1 , lpStartByte = 36 , lpLength = 4 }
            , Literal
                (String
                   "abx"
                   LP { lpLine = 3 , lpColumn = 8 , lpStartByte = 43 , lpLength = 5 })
                LP { lpLine = 3 , lpColumn = 8 , lpStartByte = 43 , lpLength = 5 }
            )
            LP
              { lpLine = 3 , lpColumn = 1 , lpStartByte = 36 , lpLength = 12 })
         LP
           { lpLine = 3 , lpColumn = 1 , lpStartByte = 36 , lpLength = 13 })
      LP { lpLine = 3 , lpColumn = 1 , lpStartByte = 36 , lpLength = 13 }
  , Statement
      (Expression
         (Assign
            ( ListAccess
                ( Identifier
                    "a"
                    LP { lpLine = 4 , lpColumn = 1 , lpStartByte = 50 , lpLength = 1 }
                , Literal
                    (Int
                       4
                       LP { lpLine = 4 , lpColumn = 3 , lpStartByte = 52 , lpLength = 1 })
                    LP { lpLine = 4 , lpColumn = 3 , lpStartByte = 52 , lpLength = 1 }
                )
                LP { lpLine = 4 , lpColumn = 1 , lpStartByte = 50 , lpLength = 4 }
            , Binary
                ( Concat
                    LP { lpLine = 4 , lpColumn = 12 , lpStartByte = 61 , lpLength = 2 }
                , Literal
                    (String
                       "5"
                       LP { lpLine = 4 , lpColumn = 8 , lpStartByte = 57 , lpLength = 3 })
                    LP { lpLine = 4 , lpColumn = 8 , lpStartByte = 57 , lpLength = 3 }
                , LeftValue
                    (ListAccess
                       ( Identifier
                           "a"
                           LP { lpLine = 4 , lpColumn = 15 , lpStartByte = 64 , lpLength = 1 }
                       , Literal
                           (Int
                              0
                              LP
                                { lpLine = 4 , lpColumn = 17 , lpStartByte = 66 , lpLength = 1 })
                           LP { lpLine = 4 , lpColumn = 17 , lpStartByte = 66 , lpLength = 1 }
                       )
                       LP
                         { lpLine = 4 , lpColumn = 15 , lpStartByte = 64 , lpLength = 4 })
                    LP { lpLine = 4 , lpColumn = 15 , lpStartByte = 64 , lpLength = 4 }
                )
                LP { lpLine = 4 , lpColumn = 8 , lpStartByte = 57 , lpLength = 11 }
            )
            LP
              { lpLine = 4 , lpColumn = 1 , lpStartByte = 50 , lpLength = 18 })
         LP
           { lpLine = 4 , lpColumn = 1 , lpStartByte = 50 , lpLength = 19 })
      LP { lpLine = 4 , lpColumn = 1 , lpStartByte = 50 , lpLength = 19 }
  , Statement
      (Expression
         (Call
            ( "println"
            , [ LeftValue
                  (ListAccess
                     ( Identifier
                         "a"
                         LP { lpLine = 5 , lpColumn = 9 , lpStartByte = 78 , lpLength = 1 }
                     , Literal
                         (Int
                            0
                            LP
                              { lpLine = 5 , lpColumn = 11 , lpStartByte = 80 , lpLength = 1 })
                         LP { lpLine = 5 , lpColumn = 11 , lpStartByte = 80 , lpLength = 1 }
                     )
                     LP { lpLine = 5 , lpColumn = 9 , lpStartByte = 78 , lpLength = 4 })
                  LP { lpLine = 5 , lpColumn = 9 , lpStartByte = 78 , lpLength = 4 }
              , LeftValue
                  (ListAccess
                     ( Identifier
                         "a"
                         LP { lpLine = 5 , lpColumn = 15 , lpStartByte = 84 , lpLength = 1 }
                     , Literal
                         (Int
                            1
                            LP
                              { lpLine = 5 , lpColumn = 17 , lpStartByte = 86 , lpLength = 1 })
                         LP { lpLine = 5 , lpColumn = 17 , lpStartByte = 86 , lpLength = 1 }
                     )
                     LP
                       { lpLine = 5 , lpColumn = 15 , lpStartByte = 84 , lpLength = 4 })
                  LP { lpLine = 5 , lpColumn = 15 , lpStartByte = 84 , lpLength = 4 }
              , LeftValue
                  (ListAccess
                     ( Identifier
                         "a"
                         LP { lpLine = 5 , lpColumn = 21 , lpStartByte = 90 , lpLength = 1 }
                     , Literal
                         (Int
                            2
                            LP
                              { lpLine = 5 , lpColumn = 23 , lpStartByte = 92 , lpLength = 1 })
                         LP { lpLine = 5 , lpColumn = 23 , lpStartByte = 92 , lpLength = 1 }
                     )
                     LP
                       { lpLine = 5 , lpColumn = 21 , lpStartByte = 90 , lpLength = 4 })
                  LP { lpLine = 5 , lpColumn = 21 , lpStartByte = 90 , lpLength = 4 }
              , LeftValue
                  (ListAccess
                     ( Identifier
                         "a"
                         LP { lpLine = 5 , lpColumn = 27 , lpStartByte = 96 , lpLength = 1 }
                     , Literal
                         (Int
                            3
                            LP
                              { lpLine = 5 , lpColumn = 29 , lpStartByte = 98 , lpLength = 1 })
                         LP { lpLine = 5 , lpColumn = 29 , lpStartByte = 98 , lpLength = 1 }
                     )
                     LP
                       { lpLine = 5 , lpColumn = 27 , lpStartByte = 96 , lpLength = 4 })
                  LP { lpLine = 5 , lpColumn = 27 , lpStartByte = 96 , lpLength = 4 }
              , LeftValue
                  (ListAccess
                     ( Identifier
                         "a"
                         LP
                           { lpLine = 5 , lpColumn = 33 , lpStartByte = 102 , lpLength = 1 }
                     , Literal
                         (Int
                            4
                            LP
                              { lpLine = 5 , lpColumn = 35 , lpStartByte = 104 , lpLength = 1 })
                         LP
                           { lpLine = 5 , lpColumn = 35 , lpStartByte = 104 , lpLength = 1 }
                     )
                     LP
                       { lpLine = 5 , lpColumn = 33 , lpStartByte = 102 , lpLength = 4 })
                  LP
                    { lpLine = 5 , lpColumn = 33 , lpStartByte = 102 , lpLength = 4 }
              ]
            )
            LP
              { lpLine = 5 , lpColumn = 1 , lpStartByte = 70 , lpLength = 37 })
         LP
           { lpLine = 5 , lpColumn = 1 , lpStartByte = 70 , lpLength = 38 })
      LP { lpLine = 5 , lpColumn = 1 , lpStartByte = 70 , lpLength = 38 }
  , Statement
      (Expression
         (Assign
            ( Identifier
                "a"
                LP { lpLine = 6 , lpColumn = 1 , lpStartByte = 109 , lpLength = 1 }
            , Literal
                (List
                   [ Literal
                       (Int
                          1
                          LP
                            { lpLine = 6 , lpColumn = 6 , lpStartByte = 114 , lpLength = 1 })
                       LP { lpLine = 6 , lpColumn = 6 , lpStartByte = 114 , lpLength = 1 }
                   , Literal
                       (Int
                          2
                          LP
                            { lpLine = 6 , lpColumn = 9 , lpStartByte = 117 , lpLength = 1 })
                       LP { lpLine = 6 , lpColumn = 9 , lpStartByte = 117 , lpLength = 1 }
                   , Literal
                       (Int
                          3
                          LP
                            { lpLine = 6 , lpColumn = 12 , lpStartByte = 120 , lpLength = 1 })
                       LP
                         { lpLine = 6 , lpColumn = 12 , lpStartByte = 120 , lpLength = 1 }
                   ]
                   LP
                     { lpLine = 6 , lpColumn = 5 , lpStartByte = 113 , lpLength = 1 })
                LP { lpLine = 6 , lpColumn = 5 , lpStartByte = 113 , lpLength = 1 }
            )
            LP
              { lpLine = 6 , lpColumn = 1 , lpStartByte = 109 , lpLength = 5 })
         LP
           { lpLine = 6 , lpColumn = 1 , lpStartByte = 109 , lpLength = 14 })
      LP
        { lpLine = 6 , lpColumn = 1 , lpStartByte = 109 , lpLength = 14 }
  , Statement
      (Expression
         (Call
            ( "println"
            , [ LeftValue
                  (ListAccess
                     ( Identifier
                         "a"
                         LP { lpLine = 7 , lpColumn = 9 , lpStartByte = 132 , lpLength = 1 }
                     , Literal
                         (Int
                            0
                            LP
                              { lpLine = 7 , lpColumn = 11 , lpStartByte = 134 , lpLength = 1 })
                         LP
                           { lpLine = 7 , lpColumn = 11 , lpStartByte = 134 , lpLength = 1 }
                     )
                     LP
                       { lpLine = 7 , lpColumn = 9 , lpStartByte = 132 , lpLength = 4 })
                  LP { lpLine = 7 , lpColumn = 9 , lpStartByte = 132 , lpLength = 4 }
              , LeftValue
                  (ListAccess
                     ( Identifier
                         "a"
                         LP
                           { lpLine = 7 , lpColumn = 15 , lpStartByte = 138 , lpLength = 1 }
                     , Literal
                         (Int
                            1
                            LP
                              { lpLine = 7 , lpColumn = 17 , lpStartByte = 140 , lpLength = 1 })
                         LP
                           { lpLine = 7 , lpColumn = 17 , lpStartByte = 140 , lpLength = 1 }
                     )
                     LP
                       { lpLine = 7 , lpColumn = 15 , lpStartByte = 138 , lpLength = 4 })
                  LP
                    { lpLine = 7 , lpColumn = 15 , lpStartByte = 138 , lpLength = 4 }
              , LeftValue
                  (ListAccess
                     ( Identifier
                         "a"
                         LP
                           { lpLine = 7 , lpColumn = 21 , lpStartByte = 144 , lpLength = 1 }
                     , Literal
                         (Int
                            2
                            LP
                              { lpLine = 7 , lpColumn = 23 , lpStartByte = 146 , lpLength = 1 })
                         LP
                           { lpLine = 7 , lpColumn = 23 , lpStartByte = 146 , lpLength = 1 }
                     )
                     LP
                       { lpLine = 7 , lpColumn = 21 , lpStartByte = 144 , lpLength = 4 })
                  LP
                    { lpLine = 7 , lpColumn = 21 , lpStartByte = 144 , lpLength = 4 }
              ]
            )
            LP
              { lpLine = 7 , lpColumn = 1 , lpStartByte = 124 , lpLength = 25 })
         LP
           { lpLine = 7 , lpColumn = 1 , lpStartByte = 124 , lpLength = 26 })
      LP
        { lpLine = 7 , lpColumn = 1 , lpStartByte = 124 , lpLength = 26 }
  , Statement
      (Expression
         (Call
            ( "println"
            , [ Binary
                  ( Multiply
                      LP
                        { lpLine = 8 , lpColumn = 24 , lpStartByte = 174 , lpLength = 1 }
                  , Binary
                      ( Concat
                          LP
                            { lpLine = 8 , lpColumn = 15 , lpStartByte = 165 , lpLength = 2 }
                      , Literal
                          (String
                             "10"
                             LP
                               { lpLine = 8 , lpColumn = 10 , lpStartByte = 160 , lpLength = 4 })
                          LP
                            { lpLine = 8 , lpColumn = 10 , lpStartByte = 160 , lpLength = 4 }
                      , LeftValue
                          (ListAccess
                             ( Identifier
                                 "a"
                                 LP
                                   { lpLine = 8 , lpColumn = 18 , lpStartByte = 168 , lpLength = 1 }
                             , Literal
                                 (Int
                                    0
                                    LP
                                      { lpLine = 8
                                      , lpColumn = 20
                                      , lpStartByte = 170
                                      , lpLength = 1
                                      })
                                 LP
                                   { lpLine = 8 , lpColumn = 20 , lpStartByte = 170 , lpLength = 1 }
                             )
                             LP
                               { lpLine = 8 , lpColumn = 18 , lpStartByte = 168 , lpLength = 4 })
                          LP
                            { lpLine = 8 , lpColumn = 18 , lpStartByte = 168 , lpLength = 4 }
                      )
                      LP
                        { lpLine = 8 , lpColumn = 10 , lpStartByte = 160 , lpLength = 12 }
                  , Literal
                      (Int
                         2
                         LP
                           { lpLine = 8 , lpColumn = 26 , lpStartByte = 176 , lpLength = 1 })
                      LP
                        { lpLine = 8 , lpColumn = 26 , lpStartByte = 176 , lpLength = 1 }
                  )
                  LP
                    { lpLine = 8 , lpColumn = 10 , lpStartByte = 160 , lpLength = 17 }
              ]
            )
            LP
              { lpLine = 8 , lpColumn = 1 , lpStartByte = 151 , lpLength = 27 })
         LP
           { lpLine = 8 , lpColumn = 1 , lpStartByte = 151 , lpLength = 28 })
      LP
        { lpLine = 8 , lpColumn = 1 , lpStartByte = 151 , lpLength = 28 }
  , Statement
      (Expression
         (Call
            ( "println"
            , [ Call
                  ( "len"
                  , [ LeftValue
                        (Identifier
                           "a"
                           LP
                             { lpLine = 9 , lpColumn = 13 , lpStartByte = 192 , lpLength = 1 })
                        LP
                          { lpLine = 9 , lpColumn = 13 , lpStartByte = 192 , lpLength = 1 }
                    ]
                  )
                  LP { lpLine = 9 , lpColumn = 9 , lpStartByte = 188 , lpLength = 6 }
              ]
            )
            LP
              { lpLine = 9 , lpColumn = 1 , lpStartByte = 180 , lpLength = 15 })
         LP
           { lpLine = 9 , lpColumn = 1 , lpStartByte = 180 , lpLength = 16 })
      LP
        { lpLine = 9 , lpColumn = 1 , lpStartByte = 180 , lpLength = 16 }
  , Statement
      (Expression
         (Call
            ( "println"
            , [ Binary
                  ( Multiply
                      LP
                        { lpLine = 10 , lpColumn = 16 , lpStartByte = 212 , lpLength = 1 }
                  , Call
                      ( "len"
                      , [ LeftValue
                            (Identifier
                               "a"
                               LP
                                 { lpLine = 10 , lpColumn = 13 , lpStartByte = 209 , lpLength = 1 })
                            LP
                              { lpLine = 10 , lpColumn = 13 , lpStartByte = 209 , lpLength = 1 }
                        ]
                      )
                      LP
                        { lpLine = 10 , lpColumn = 9 , lpStartByte = 205 , lpLength = 6 }
                  , Literal
                      (Int
                         8
                         LP
                           { lpLine = 10 , lpColumn = 18 , lpStartByte = 214 , lpLength = 1 })
                      LP
                        { lpLine = 10 , lpColumn = 18 , lpStartByte = 214 , lpLength = 1 }
                  )
                  LP
                    { lpLine = 10 , lpColumn = 9 , lpStartByte = 205 , lpLength = 10 }
              ]
            )
            LP
              { lpLine = 10 , lpColumn = 1 , lpStartByte = 197 , lpLength = 19 })
         LP
           { lpLine = 10 , lpColumn = 1 , lpStartByte = 197 , lpLength = 20 })
      LP
        { lpLine = 10 , lpColumn = 1 , lpStartByte = 197 , lpLength = 20 }
  , Statement
      (Comment
         "println([1, 2, 3]);"
         LP
           { lpLine = 11 , lpColumn = 1 , lpStartByte = 218 , lpLength = 21 })
      LP
        { lpLine = 11 , lpColumn = 1 , lpStartByte = 218 , lpLength = 21 }
  ]
  LP { lpLine = 1 , lpColumn = 1 , lpStartByte = 0 , lpLength = 239 }
